<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/common/enums/model</filePath>
	<fileName>${ClassName}.java</fileName>
	<content><![CDATA[
package cn.com.git.udmp.common.enums.model;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import cn.com.git.udmp.common.enums.IType;

public enum ${ClassName} implements IType {
<#list typeMap as type>
    ID_${type_index + 1}("${type.id}","${type.value}","${type.sort}")<#sep>,${"\n"}</#sep></#list>;


    String id;
    String value;
    String seq;

    ${ClassName}(String _id, String _value, String _seq) {
        id = _id;
        value = _value;
        seq = _seq;
    }
    
    private static Map<String, ${ClassName}> map = new LinkedHashMap<String, ${ClassName}>();
    private static Map<String, String> valMap = new LinkedHashMap<String, String>();
    
    static {
        List<${ClassName}> typeList = Arrays.asList(${ClassName}.values());
        typeList.stream().sorted((x, y) -> x.seq.compareTo(y.seq)).forEach(x -> {
            map.put(x.name(), x);
            valMap.put(x.getId(), x.getValue());
        });
    }

    ${ClassName}(String... names) {
        id = names[0];
        value = names[1];
        seq = names[2];
    }

    @Override
    public Map<String, String> getType() {
        return valMap;
    }
    
    @Override
    public String getValueById(String id) {
        return valMap.get(id);
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public String getSeq() {
        return seq;
    }

    public void setSeq(String seq) {
        this.seq = seq;
    }

    @Override
    public String getIdByValue(String value) {
        for(String key:valMap.keySet()){
            if(value.equals(valMap.get(key))){
                return key;
            }
        }
        return null;
    }

}
]]>
	</content>
</template>